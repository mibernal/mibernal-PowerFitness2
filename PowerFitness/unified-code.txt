

/* src\app\components\auth\login-form\login-form.component.html */

<!-- login-form.component.html -->
<div class="form-container">
  <h1>Formulario de Ingreso</h1>
  <form [formGroup]="loginForm" (ngSubmit)="onSubmit()">
    <div>
      <label for="email">Email:</label>
      <input type="email" id="email" formControlName="email">
      <div *ngIf="loginForm.get('email')?.errors?.['required']">Se requiere un Email.</div>
      <div *ngIf="loginForm.get('email')?.errors?.['email']">Formato Invalido.</div>
    </div>
    <div>
      <label for="password">Contraseña:</label>
      <input type="password" id="password" formControlName="password">
      <div *ngIf="loginForm.get('password')?.errors?.['required']">Es necesaria una Contraseña.</div>
    </div>
    <button type="submit" [disabled]="loginForm.invalid || isSubmitting">Ingresar</button>
    <hr>
    <div class="google-btn" (click)="googleLogin()" [hidden]="isSubmitting">Ingresar con Google</div>
    <div class="facebook-btn" (click)="facebookLogin()" [hidden]="isSubmitting">Ingresar con Facebook</div>
  </form>

  <div *ngIf="!isRegistrationEnabled && !isSubmitting" class="error-message">
    No se permite el inicio de sesión. Por favor, regístrate antes de iniciar sesión.
    <a (click)="redirectToRegistration()">Regístrate aquí</a>
  </div>

  <div *ngIf="isSubmitting" class="loading-message">
    Iniciando sesión...
  </div>
</div>


/* src\app\components\auth\login-form\login-form.component.scss */

@import '../../../../../node_modules/bootstrap/scss/bootstrap.scss';
@import '~bootstrap/dist/css/bootstrap.min.css';

.form-container {
  display: flex;
  flex-direction: column;
  align-items: center;

  h1 {
    font-size: 24px;
    margin-bottom: 20px;
  }

  form {
    display: flex;
    flex-direction: column;
    align-items: center;

    div {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-bottom: 20px;

      label {
        font-size: 16px;
        font-weight: bold;
        margin-bottom: 10px;
      }

      input[type="email"],
      input[type="password"] {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        border-radius: 5px;
        border: 1px solid #ccc;

        &:focus {
          outline: none;
          border-color: #4CAF50;
        }
      }

      div.error {
        color: red;
        margin-top: 5px;
        font-size: 14px;
      }
    }

    button[type="submit"] {
      background-color: #4CAF50;
      color: white;
      padding: 10px 20px;
      font-size: 16px;
      border-radius: 5px;
      border: none;
      cursor: pointer;

      &:disabled {
        opacity: 0.5;
        cursor: default;
      }
    }

    .google-btn, .facebook-btn {
      display: flex;
      justify-content: center;
      align-items: center;
      width: 100%;
      height: 40px;
      color: white;
      font-size: 16px;
      font-weight: bold;
      border-radius: 5px;
      cursor: pointer;
    }
    
    .google-btn {
      background-color: #DB4437;
      margin-bottom: 10px;
    
      &:hover {
        background-color: #D82018;
      }
    }
    
    .facebook-btn {
      background-color: #3B5998;
    
      &:hover {
        background-color: #2F477A;
      }
    }    
  }
}


/* src\app\components\auth\login-form\login-form.component.spec.ts */

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LoginFormComponent } from './login-form.component';

describe('LoginFormComponent', () => {
  let component: LoginFormComponent;
  let fixture: ComponentFixture<LoginFormComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [LoginFormComponent]
    });
    fixture = TestBed.createComponent(LoginFormComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* src\app\components\auth\login-form\login-form.component.ts */

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AngularFireAuth } from '@angular/fire/compat/auth';
import { Router } from '@angular/router';
import firebase from 'firebase/compat/app';
import { MatSnackBar } from '@angular/material/snack-bar';
import { AuthService } from '../../services/auth/auth.service';

@Component({
  selector: 'app-login-form',
  templateUrl: './login-form.component.html',
  styleUrls: ['./login-form.component.scss']
})
export class LoginFormComponent implements OnInit {
  loginForm: FormGroup;
  isSubmitting = false;
  isRegistrationEnabled = true; // Variable para habilitar o deshabilitar el registro
  isUserRegistered = false;

  constructor(
    private fb: FormBuilder,
    private auth: AngularFireAuth,
    private router: Router,
    private snackBar: MatSnackBar,
    private authService: AuthService // Agregar el servicio AuthService
  ) {
    this.loginForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', Validators.required]
    });
  }

  ngOnInit(): void {
  }

  onSubmit(): void {
    if (this.loginForm.valid && !this.isSubmitting) {
      this.isSubmitting = true;
      const { email, password } = this.loginForm.value;
      this.authenticateUser(email, password);
    }
  }

  googleLogin(): void {
    if (!this.isSubmitting) {
      this.isSubmitting = true;
      this.auth.signInWithPopup(new firebase.auth.GoogleAuthProvider())
        .then((result: any) => {
          console.log(result);
          this.redirectToUserPanel();
        })
        .catch((error: any) => {
          this.handleAuthenticationError(error);
          console.log(error)
        })
        .finally(() => {
          this.isSubmitting = false;
        });
    }
  }

  facebookLogin(): void {
    if (!this.isSubmitting) {
      this.isSubmitting = true;
      this.auth.signInWithPopup(new firebase.auth.FacebookAuthProvider())
        .then((result: any) => {
          console.log(result);
          this.redirectToUserPanel();
        })
        .catch((error: any) => {
          this.handleAuthenticationError(error);
          console.log(error)
        })
        .finally(() => {
          this.isSubmitting = false;
        });
    }
  }

  redirectToRegistration(): void {
    this.router.navigate(['/registration-form']); // Redireccionar a la página de registro
  }

  private authenticateUser(email: string, password: string): void {
    this.auth.signInWithEmailAndPassword(email, password)
      .then((result: any) => {
        console.log(result);
        if (result.user.metadata.creationTime === result.user.metadata.lastSignInTime) {
          // El usuario es nuevo, mostrar mensaje de error
          this.isUserRegistered = false;
          this.showUserNotRegisteredError();
        } else {
          // El usuario existe, redirigir al panel de usuario
          this.redirectToUserPanel();
        }
      })
      .catch((error: any) => {
        if (error.code === 'auth/user-not-found') {
          // Usuario no registrado, mostrar mensaje de error
          this.isUserRegistered = false;
          this.showUserNotRegisteredError();
          console.log(error)
        } else {
          this.handleAuthenticationError(error);
        }
      })
      .finally(() => {
        this.isSubmitting = false;
      });
  }

  private showUserNotRegisteredError(): void {
    this.snackBar.open('El usuario no está registrado. Regístrate antes de iniciar sesión.', 'Cerrar', { duration: 3000 });
    this.redirectToRegistration(); // Redireccionar a la página de registro
  }

  private redirectToUserPanel(): void {
    this.router.navigate(['/user-panel']); // Redireccionar al panel de usuario después de iniciar sesión
  }

  private handleAuthenticationError(error: any): void {
    if (error.code === 'auth/popup-closed-by-user') {
      console.log('Autenticación cancelada por el usuario');
    } else if (error.code === 'auth/wrong-password') {
      console.log('Contraseña incorrecta');
      this.snackBar.open('Contraseña incorrecta. Por favor, verifica tus credenciales.', 'Cerrar', { duration: 3000 });
    } else {
      console.error(error);
      this.snackBar.open('Error en el inicio de sesión', 'Cerrar', { duration: 3000 });
    }
  }
}


/* src\app\components\auth\registration-form\registration-form.component.html */

<div class="form-container">
  <h1>Formulario de Registro</h1>
  <form [formGroup]="registrationForm" (ngSubmit)="onSubmit()">
    <div>
      <label for="firstName">Nombres:</label>
      <input type="text" id="firstName" formControlName="firstName">
      <div *ngIf="registrationForm.get('firstName')?.invalid && registrationForm.get('firstName')?.touched">
        <div *ngIf="registrationForm.get('firstName')?.errors?.['required']">Es necesario un Nombre.</div>
      </div>
    </div>

    <div>
      <label for="lastName">Apellidos:</label>
      <input type="text" id="lastName" formControlName="lastName">
      <div *ngIf="registrationForm.get('lastName')?.invalid && registrationForm.get('lastName')?.touched">
        <div *ngIf="registrationForm.get('lastName')?.errors?.['required']">Es necesario un Apellido.</div>
      </div>
    </div>

    <div>
      <label for="email">Email:</label>
      <input type="email" id="email" formControlName="email">
      <div *ngIf="registrationForm.get('email')?.invalid && registrationForm.get('email')?.touched">
        <div *ngIf="registrationForm.get('email')?.errors?.['email']">Formato inválido.</div>   
        <div *ngIf="registrationForm.get('email')?.errors?.['required']">Es necesario un Email.</div>
      </div>
    </div>

    <div>
      <label for="password">Contraseña:</label>
      <input type="password" id="password" formControlName="password">
      <div *ngIf="registrationForm.get('password')?.invalid && registrationForm.get('password')?.touched">
        <div *ngIf="registrationForm.get('password')?.errors?.['required']">Es necesaria una Contraseña.</div>
      </div>
    </div>

    <button type="submit" [disabled]="registrationForm.invalid">Enviar</button>

    <hr>

    <div>
      <button class="google-btn" (click)="registerWithGoogle()">Registrar con Google</button>
      <button class="facebook-btn" (click)="registerWithFacebook()">Registrar con Facebook</button>
    </div>
  </form>
</div>


/* src\app\components\auth\registration-form\registration-form.component.scss */

@import '/../node_modules/bootstrap';
@import '~bootstrap/dist/css/bootstrap.min.css';


.form-container {
  display: flex;
  flex-direction: column;
  align-items: center;

  h1 {
    font-size: 24px;
    margin-bottom: 20px;
  }
}

form {
display: flex;
flex-direction: column;
align-items: center;
}
div {
display: flex;
flex-direction: column;
align-items: center;
margin-bottom: 20px;
}
label {
  font-size: 16px;
  font-weight: bold;
  margin-bottom: 10px;
}

input[type="text"],
input[type="email"],
input[type="password"] {
  width: 100%;
  padding: 10px;
  font-size: 16px;
  border-radius: 5px;
  border: 1px solid #ccc;

  &:focus {
    outline: none;
    border-color: #4CAF50;
  }
}

div.error {
  color: red;
  margin-top: 5px;
  font-size: 14px;
}

button[type="submit"] {
background-color: #4CAF50;
color: white;
padding: 10px 20px;
font-size: 16px;
border-radius: 5px;
border: none;
cursor: pointer;
&:disabled {
  opacity: 0.5;
  cursor: default;
  }
}

.google-btn, .facebook-btn {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 40px;
  color: white;
  font-size: 16px;
  font-weight: bold;
  border-radius: 5px;
  cursor: pointer;
}

.google-btn {
background-color: #DB4437;
margin-bottom: 10px;
&:hover {
  background-color: #D82018;
}
}

.facebook-btn {
background-color: #3B5998;
&:hover {
  background-color: #2F477A;
}

}

/* src\app\components\auth\registration-form\registration-form.component.spec.ts */

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { RegistrationFormComponent } from './registration-form.component';

describe('RegistrationFormComponent', () => {
  let component: RegistrationFormComponent;
  let fixture: ComponentFixture<RegistrationFormComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [RegistrationFormComponent]
    });
    fixture = TestBed.createComponent(RegistrationFormComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* src\app\components\auth\registration-form\registration-form.component.ts */

import { Component, OnInit, OnDestroy } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AuthService } from '../../services/auth/auth.service';
import { Router } from '@angular/router';
import { AngularFirestore } from '@angular/fire/compat/firestore';
import { MatSnackBar } from '@angular/material/snack-bar';
import { AngularFireAuth } from '@angular/fire/compat/auth';
import firebase from 'firebase/compat/app';
import { User } from 'firebase/auth';

@Component({
  selector: 'app-registration-form',
  templateUrl: './registration-form.component.html',
  styleUrls: ['./registration-form.component.scss']
})
export class RegistrationFormComponent implements OnInit, OnDestroy {
  registrationForm!: FormGroup;
  isSubmitting = false;
  isPopupOpen = false;
  currentUserSubscription: any;

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private firestore: AngularFirestore,
    private snackBar: MatSnackBar,
    private router: Router,
    private auth: AngularFireAuth
  ) {}

  ngOnInit(): void {
    this.registrationForm = this.fb.group({
      firstName: ['', Validators.required],
      lastName: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]]
    });
    this.currentUserSubscription = this.authService.getCurrentUser().subscribe(() => {
      // handle current user value
    });
  }

  ngOnDestroy(): void {
    this.currentUserSubscription.unsubscribe();
  }

  isEmailValid(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  async onSubmit(): Promise<void> {
    const { firstName, lastName, email, password } = this.registrationForm.value;

    if (this.registrationForm.controls['email'].invalid || !this.isEmailValid(email)) {
      console.log('Invalid email format');
      return;
    }

    try {
      // Verificar si el correo electrónico ya existe en la base de datos
      const querySnapshot = await this.firestore
        .collection('users', (ref) => ref.where('email', '==', email))
        .get()
        .toPromise();

      if (!querySnapshot?.empty) {
        console.log('Correo Electronico Ya Existe');
        // Mostrar mensaje de error
        this.snackBar.open('Correo Electronico Ya Existe', 'Cerrar', { duration: 5000 });
        return;
      }

      // Si el correo electrónico no existe, crear el usuario
      const userCredential = await this.authService.signUpWithEmailAndPassword(email, password).toPromise();
      if (userCredential?.user) {
        console.log('User created:', userCredential.user);
        // Agregar al usuario a Firestore
        const userRef = this.firestore.collection('users').doc(userCredential.user.uid);
        await userRef.set({
          firstName,
          lastName,
          email,
        });
        console.log('User added to Firestore:', userCredential.user);
        // Redirigir al panel de usuario
        this.router.navigate(['/user-panel']);
      }
    } catch (error) {
      console.log('Error creating user:', error);
    }
  }

  verifyAndRegisterWithExternalProvider(email: string, uid: string, displayName: string | null, photoURL: string | null): void {
    // Verificar si el correo electrónico ya existe en la base de datos
    this.firestore
      .collection('users', (ref) => ref.where('email', '==', email))
      .get()
      .toPromise()
      .then((querySnapshot) => {
        if (!querySnapshot?.empty) {
          console.log('Correo Electronico Ya Existe');
          // Mostrar mensaje de error
          this.snackBar.open('Correo Electronico Ya Existe', 'Cerrar', { duration: 5000 });
          return;
        }

        // Si el correo electrónico no existe, crear el usuario con el proveedor externo
        const [firstName, lastName] = (displayName || '').split(' ');
        const userRef = this.firestore.collection('users').doc(uid);
        userRef
          .set({
            firstName,
            lastName,
            email,
            password: null, // Agregar la contraseña como null al documento del usuario en Firestore
            photoURL: photoURL || '' // Agregar la foto de perfil al documento del usuario en Firestore, o cadena vacía si es null
          })
          .then(() => {
            console.log('Usuario Creado', uid);
            this.snackBar.open('Usuario Creado', 'Cerrar', { duration: 5000 });
            // Redirigir al panel de usuario
            this.router.navigate(['/user-panel']);
          })
          .catch((error) => {
            console.log('Error Creando Usuario', error);
            this.snackBar.open('Error Creando Usuario', 'Cerrar', { duration: 5000 });
          });
      })
      .catch((error) => {
        console.log('Error checking email existence:', error);
        this.snackBar.open('Error al Verificar Email', 'Cerrar', { duration: 5000 });
      });
  }

  registerWithGoogle(): void {
    if (this.isPopupOpen) {
      return;
    }

    this.isPopupOpen = true;

    this.auth
      .signInWithPopup(new firebase.auth.GoogleAuthProvider())
      .then((result: firebase.auth.UserCredential) => {
        const credential = result?.credential;
        if (credential) {
          const user = result.user;
          if (user) {
            const email = user.email ?? '';
            const photoURL = user.photoURL ?? '';
            const displayName = user.displayName ?? '';
            this.verifyAndRegisterWithExternalProvider(email, user.uid, displayName, photoURL);
          }
        }
      })
      .catch((error) => {
        this.snackBar.open('Error al registrar con Google', 'Cerrar', { duration: 5000 });
        console.log('Error registering with Google:', error);
      })
      .finally(() => {
        this.isPopupOpen = false;
      });
  }

  registerWithFacebook(): void {
    if (this.isPopupOpen) {
      return;
    }

    this.isPopupOpen = true;

    this.auth
      .signInWithPopup(new firebase.auth.FacebookAuthProvider())
      .then((result: firebase.auth.UserCredential) => {
        const credential = result?.credential;
        if (credential) {
          const user = result.user;
          if (user) {
            const email = user.email ?? '';
            const photoURL = user.photoURL ?? '';
            const displayName = user.displayName ?? '';
            this.verifyAndRegisterWithExternalProvider(email, user.uid, displayName, photoURL);
          }
        }
      })
      .catch((error) => {
        this.snackBar.open('Error al registrar con Facebook', 'Cerrar', { duration: 5000 });
        console.log('Error registering with Facebook:', error);
      })
      .finally(() => {
        this.isPopupOpen = false;
      });
  }
}


/* src\app\components\cart\cart.component.html */

<div class="cart">
  <h2>Carrito de compras</h2>
  <div *ngIf="products.length > 0; else emptyCart">
    <div class="products">
      <div *ngFor="let product of products">
        <img [src]="product.imageUrl[0]" alt="{{ product.name }}">
        <h3>{{ product.name }}</h3>
        <p>{{ product.description }}</p>
        <p>Tamaño: {{ product.size }}</p>
        <p>Sabor: {{ getSelectedFlavor(product) }}</p>
        <p>Precio: ${{ formatPrice(product.price) }}</p>
        <button (click)="removeProduct(product)">Eliminar</button>
      </div>
    </div>
    <div class="total">
      <p>Total: ${{ getTotal() | number }}</p>
      <button (click)="completePurchase()">Finalizar Pago</button>
    </div>
  </div>

  <ng-template #emptyCart>
    <p>Tu carrito de compras está vacío.</p>
  </ng-template>
</div>


/* src\app\components\cart\cart.component.scss */


.cart {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 20px;

  h2 {
    margin-bottom: 20px;
  }

  .products {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    grid-gap: 20px;

    div {
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 20px;
      border: 1px solid #ccc;
      border-radius: 5px;

      img {
        width: 100%;
        max-width: 200px;
        margin-bottom: 10px;
      }

      button {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        font-size: 16px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        margin-top: 10px;
      }
    }
  }

  .total {
    margin-top: 20px;
    text-align: right;

    p {
      font-size: 20px;
      font-weight: bold;
    }
  }
}

  .total {
      button {
        background-color: #4CAF50;
        color: white;
        padding: 20px 30px;
        font-size: 17px;
        border-radius: 6px;
        border: none;
        cursor: pointer;
        margin-top: 10px;
      }
    }
  

/* src\app\components\cart\cart.component.spec.ts */

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { CartComponent } from './cart.component';

describe('CartComponent', () => {
  let component: CartComponent;
  let fixture: ComponentFixture<CartComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [CartComponent]
    });
    fixture = TestBed.createComponent(CartComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* src\app\components\cart\cart.component.ts */

import { Component, OnInit } from '@angular/core';
import { CartService } from '../services/cart.service';
import { Product } from '../../models/product.model';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Router } from '@angular/router';

@Component({
  selector: 'app-cart',
  templateUrl: './cart.component.html',
  styleUrls: ['./cart.component.scss']
})
export class CartComponent implements OnInit {
  products: Product[] = [];

  constructor(private cartService: CartService, private snackBar: MatSnackBar, private router: Router) { }

  ngOnInit(): void {
    this.products = this.cartService.getProducts();
  }

  getTotal(): number {
    return this.products.reduce((acc, product) => acc + product.price, 0);
  }

  removeProduct(product: Product): void {
    this.cartService.removeProduct(product);
    this.products = this.cartService.getProducts();
  }

  getSelectedSize(product: Product): string {
    return product.selectedSize ? product.selectedSize : 'N/A';
  }
  
  getSelectedFlavor(product: Product): string {
    return product.selectedFlavor ? product.selectedFlavor : 'N/A';
  }

  formatPrice(price: number): string {
    return price.toLocaleString('es-ES');
  }

  completePurchase(): void {

    const isSuccess = true; // Indica si la compra se ha completado con éxito
  
    if (isSuccess) {
      // Redirigir a la página de checkout
      this.router.navigate(['/checkout']);
    } else {
      // Mostrar mensaje de error
      this.snackBar.open('Ha ocurrido un error al completar la compra. Por favor, inténtalo de nuevo.', 'Cerrar', { duration: 3000 });
    }
  }  
}

/* src\app\components\checkout\checkout.component.html */

<div class="checkout-container">
  <div class="checkout-form">
    <h2>Checkout</h2>
    <form [formGroup]="checkoutForm" (ngSubmit)="onSubmit()">
      <div class="form-group">
        <label for="numero_documento">Número de documento:</label>
        <input type="number" id="numero_documento" formControlName="numero_documento" required>
      </div>
      <div class="form-group">
        <label for="email">Email:</label>
        <input type="email" id="email" formControlName="email" required>
      </div>
      <div class="form-group">
        <label for="nombres">Nombres:</label>
        <input type="text" id="nombres" formControlName="nombres" required>
      </div>
      <div class="form-group">
        <label for="apellidos">Apellidos:</label>
        <input type="text" id="apellidos" formControlName="apellidos" required>
      </div>
      <div class="form-group">
        <label for="departamento">Departamento:</label>
        <select id="departamento" formControlName="departamento" required (change)="onDepartmentChange(checkoutForm.value.departamento)">
          <option value="" disabled selected>Seleccione un departamento</option>
          <option *ngFor="let department of departments" [value]="department">{{ department }}</option>
        </select>
      </div>
  
      <div class="form-group">
        <label for="ciudad">Ciudad:</label>
        <select id="ciudad" formControlName="ciudad" required>
          <option value="" disabled selected>Seleccione una ciudad</option>
          <ng-container *ngFor="let ciudad of cities">
            <option [value]="ciudad">{{ ciudad }}</option>
          </ng-container>
        </select>
      </div>
      <div class="form-group">
        <label for="direccion_envio">Dirección de envío:</label>
        <input type="text" id="direccion_envio" formControlName="direccion_envio" required>
      </div>
      <div class="form-group">
        <label for="complemento">Complemento:</label>
        <input type="text" id="complemento" formControlName="complemento">
      </div>
      <div class="form-group">
        <label for="celular">Celular:</label>
        <input type="number" id="celular" formControlName="celular" required>
      </div>
      <div class="form-group">
        <label for="notas">Notas:</label>
        <textarea id="notas" formControlName="notas"></textarea>
      </div>
      <button type="submit" [disabled]="checkoutForm.invalid">Realizar pedido</button>
    </form>
  </div>

  <div class="payment-summary">
    <h2>Resumen de pedido</h2>
    <div *ngFor="let product of products" class="product-item">
      <img [src]="product.imageUrl[0]" alt="{{ product.name }}">
      <div class="product-details">
        <h3>{{ product.name }}</h3>
        <p>{{ product.description }}</p>
        <p>Tamaño: {{ product.size }}</p>
        <p>Sabor: {{ getSelectedFlavor(product) }}</p>
        <p>Precio: ${{ formatPrice(product.price) }}</p>
      </div>
      <button (click)="removeProduct(product)">Eliminar</button>
    </div>
    <div class="total">
      <p>Total: ${{ getTotal() | number }}</p>
    </div>
    <div class="payment-options">
      <h3>Seleccione el método de pago</h3>
      <div>
      <!--  <p><button (click)="makeMercadoPagoPayment()">Pagar con MercadoPago</button></p> -->
      <!--  <p><button (click)="makePSEPayment()">Pagar con PSE</button></p> -->
      </div>
    </div>
  </div>
</div>


/* src\app\components\checkout\checkout.component.scss */

@import '~bootstrap/dist/css/bootstrap.min.css';

/* checkout.component.scss */

.checkout-container {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
}

.checkout-form {
  flex: 1;
}

.payment-summary {
  flex: 1;
  margin-left: 20px;
}

h2 {
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 20px;
}

label {
  display: block;
  font-weight: bold;
  margin-bottom: 5px;
}

input[type='text'],
input[type='number'],
textarea {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

textarea {
  height: 100px;
}

button[type='submit'] {
  padding: 10px 20px;
  background-color: #4caf50;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

button[type='submit']:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.payment-options {
  margin-top: 20px;
}

.payment-options button {
  margin-right: 10px;
}

.product-item {
  display: flex;
  align-items: center;
  margin-bottom: 20px;
}

.product-item img {
  width: 80px;
  height: 80px;
  object-fit: cover;
  margin-right: 10px;
}

.product-details {
  flex: 1;
}

.total {
  margin-top: 20px;
  font-weight: bold;
}


/* src\app\components\checkout\checkout.component.spec.ts */

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { CheckoutComponent } from './checkout.component';

describe('CheckoutComponent', () => {
  let component: CheckoutComponent;
  let fixture: ComponentFixture<CheckoutComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [CheckoutComponent]
    });
    fixture = TestBed.createComponent(CheckoutComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* src\app\components\checkout\checkout.component.ts */

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AngularFirestore } from '@angular/fire/compat/firestore';
import { Router } from '@angular/router';
import { CartService } from '../services/cart.service';
import { Product } from 'src/app/models/product.model';
import { LocationService } from '../services/location.service';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-checkout',
  templateUrl: './checkout.component.html',
  styleUrls: ['./checkout.component.scss']
})
export class CheckoutComponent implements OnInit {
  checkoutForm: FormGroup;
  products: Product[];
  total: number;
  departments: any[];
  cities: any[];

  constructor(
    private formBuilder: FormBuilder,
    private firestore: AngularFirestore,
    private cartService: CartService,
    private router: Router,
    private locationService: LocationService // Inject the LocationService
  ) {}

  ngOnInit(): void {
    this.checkoutForm = this.formBuilder.group({
      numero_documento: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      nombres: ['', Validators.required],
      apellidos: ['', Validators.required],
      departamento: ['', Validators.required],
      ciudad: ['', Validators.required],
      direccion_envio: ['', Validators.required],
      complemento: [''],
      celular: ['', Validators.required],
      notas: [''],
      fecha: ['', Validators.required],
      numero_pedido: [''],
      estado: ['']
    });

    this.products = this.cartService.getProducts();
    this.total = this.cartService.getTotal();

    // Fetch departments from the LocationService
    this.locationService.departments$.subscribe((departments) => {
      this.departments = departments;
    });

    // Initialize the cities array with an empty array
    this.cities = [];

    // Subscribe to changes in the selected department
    this.checkoutForm.get('departamento')?.valueChanges.subscribe((departmentId) => {
      if (departmentId) {
        // Fetch cities by department from the LocationService
        this.locationService.getCitiesByDepartment(departmentId).subscribe((cities) => {
          this.cities = cities;
        });
      } else {
        // If no department selected, reset the cities array
        this.cities = [];
      }
    });
  }

  onDepartmentChange(departmentId: string): void {
    if (departmentId) {
      // Fetch cities by department from the LocationService
      this.locationService.getCitiesByDepartment(departmentId).subscribe((cities: any[]) => {
        this.cities = cities;
      });
    } else {
      this.cities = [];
    }
  }

  onSubmit(): void {
    if (this.checkoutForm.invalid) {
      return;
    }

    const pedido = {
      numero_documento: this.checkoutForm.value.numero_documento,
      email: this.checkoutForm.value.email,
      nombres: this.checkoutForm.value.nombres,
      apellidos: this.checkoutForm.value.apellidos,
      departamento: this.checkoutForm.value.departamento,
      ciudad: this.checkoutForm.value.ciudad,
      direccion_envio: this.checkoutForm.value.direccion_envio,
      complemento: this.checkoutForm.value.complemento,
      celular: this.checkoutForm.value.celular,
      notas: this.checkoutForm.value.notas,
      fecha: this.checkoutForm.value.fecha,
      numero_pedido: '', // Se generará automáticamente en Firestore
      estado: '' // Se establecerá automáticamente en Firestore
    };

    this.firestore
      .collection('pedidos')
      .add(pedido)
      .then((docRef: { id: any; }) => {
        const numeroPedido = docRef.id;
        this.firestore
          .collection('pedidos')
          .doc(numeroPedido)
          .update({
            numero_pedido: numeroPedido,
            estado: 'pendiente'
          })
          .then(() => {
            console.log('Pedido guardado exitosamente.');
            // Aquí puedes redirigir al usuario a la página de éxito del pedido
          })
          .catch((error: any) => {
            console.error('Error al actualizar el número de pedido y estado:', error);
          });
      })
      .catch((error: any) => {
        console.error('Error al guardar el pedido:', error);
      });
  }

  getSelectedFlavor(product: Product): string {
    return product.selectedFlavor ? product.selectedFlavor : 'N/A';
  }
  
  formatPrice(price: number): string {
    return price.toLocaleString('es-ES');
  }

  removeProduct(product: Product): void {
    this.cartService.removeProduct(product);
    this.products = this.cartService.getProducts();
    this.total = this.cartService.getTotal();
  }

  getTotal(): number {
    return this.total;
  }
}

/* src\app\components\contact\contact.component.html */

<div class="container">
  <h1>Contáctanos</h1>
  <div class="row">
    <div class="col-md-6">
      <h3>Ubicación</h3>
      <p>Estamos ubicados en Bogotá y Hacemos envios a todo el pais¡.</p>
      <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3976.062868153577!2d-74.0646823842646!3d4.697542342809965!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x8e3f8a84ce4b3719%3A0xeb13a526a824c6b4!2sBogot%C3%A1%2C%20Colombia!5e0!3m2!1sen!2sus!4v1620354656928!5m2!1sen!2sus" width="100%" height="350" style="border:0;" allowfullscreen="" loading="lazy"></iframe>
    </div>
    <div class="col-md-6">
      <h3>Contáctanos</h3>
      <form>
        <div class="form-group">
          <label for="name">Nombre</label>
          <input type="text" class="form-control" id="name" placeholder="Ingresa tu nombre">
        </div>
        <div class="form-group">
          <label for="email">Correo electrónico</label>
          <input type="email" class="form-control" id="email" placeholder="Ingresa tu correo electrónico">
        </div>
        <div class="form-group">
          <label for="message">Mensaje</label>
          <textarea class="form-control" id="message" rows="5" placeholder="Ingresa tu mensaje"></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Enviar mensaje</button>
      </form>
      <div class="mt-4">
        <p>También puedes contactarnos por:</p>
        <ul>
          <li><a href="tel:+573124193753"><i class="fa fa-phone mr-2"></i>+57 3124193753</a></li>
          <li><a href="https://wa.me/573124193753"><i class="fa fa-whatsapp mr-2"></i>+57 3124193753</a></li>
          <li><a href="mailto:contacto@tutiendafit.com"><i class="fa fa-envelope mr-2"></i>contacto@tutiendafit.com</a></li>
        </ul>
      </div>
    </div>
  </div>
</div>


/* src\app\components\contact\contact.component.scss */

@import '~bootstrap/dist/css/bootstrap.min.css';

$primary-color: #511a87;
$secondary-color: #ffffff;

.container {
  padding: 50px;
  background-color: $secondary-color;

  h1 {
    color: $primary-color;
    font-size: 36px;
    margin-bottom: 40px;
    text-align: center;
    text-transform: uppercase;
  }

  .row {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;

    .col-md-6 {
      margin-bottom: 40px;

      h3 {
        color: $primary-color;
        font-size: 26px;
        margin-bottom: 20px;
        text-align: center;
        text-transform: uppercase;
      }

      p {
        font-size: 18px;
        margin-bottom: 20px;
        text-align: center;
      }

      iframe {
        border: 0;
        height: 350px;
        width: 100%;
      }

      form {
        input,
        textarea {
          border: 2px solid $primary-color;
          border-radius: 4px;
          font-size: 16px;
          padding: 12px;
          width: 100%;

          &:focus {
            border-color: darken($primary-color, 10%);
            outline: none;
          }
        }

        label {
          display: block;
          font-size: 16px;
          margin-bottom: 8px;
          text-transform: uppercase;
        }

        button {
          background-color: $primary-color;
          border: none;
          border-radius: 4px;
          color: $secondary-color;
          cursor: pointer;
          font-size: 18px;
          padding: 12px 24px;
          transition: background-color 0.2s ease-in-out;

          &:hover {
            background-color: darken($primary-color, 10%);
          }
        }
      }

      ul {
        list-style: none;
        margin: 0;
        padding: 0;

        li {
          margin-bottom: 10px;

          a {
            color: $primary-color;
            font-size: 16px;
            text-decoration: none;

            i {
              margin-right: 10px;
            }

            &:hover {
              text-decoration: underline;
            }
          }
        }
      }
    }
  }
}


/* src\app\components\contact\contact.component.spec.ts */

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ContactComponent } from './contact.component';

describe('ContactComponent', () => {
  let component: ContactComponent;
  let fixture: ComponentFixture<ContactComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [ContactComponent]
    });
    fixture = TestBed.createComponent(ContactComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* src\app\components\contact\contact.component.ts */

import { Component } from '@angular/core';

@Component({
  selector: 'app-contact',
  templateUrl: './contact.component.html',
  styleUrls: ['./contact.component.scss']
})
export class ContactComponent {

}


/* src\app\components\home\home.component.html */

<main>
  <section class="py-5 bg-light">
    <div class="container">
      <h1 class="text-center mb-5">Bienvenido a PowerFitness</h1>

      <!-- Agregar el slider aquí -->
      <div class="carousel-container">
        <ngx-slick-carousel class="carousel" [config]="carouselConfig">
          <div *ngFor="let brand of brands" class="carousel-item">
            <img [src]="brand.image[0]" alt="{{ brand.brand }}" class="brand-logo">
          </div>
        </ngx-slick-carousel>
      </div>

      <h1 class="text-center mb-5">Productos en Oferta</h1>
      <div class="row">
        <div *ngFor="let product of products" class="col-md-4 col-sm-6 mb-4">
          <div class="card shadow-sm">
            <img class="card-img-top" [src]="product.imageUrl" alt="{{ product.name }}">
            <div class="card-body">
              <h4 class="card-title">{{ product.name }}</h4>
              <p class="card-text">{{ product.description }}</p>
              <div class="d-flex justify-content-between align-items-center">
                <div class="btn-group">
                  <button type="button" class="btn btn-sm btn-outline-secondary">Ver más</button>
                  <button type="button" class="btn btn-sm btn-outline-secondary">Comprar</button>
                </div>
                <small class="text-muted">${{ formatPriceWithThousandsSeparator(product.price) }}</small>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</main>


/* src\app\components\home\home.component.scss */



/* Estilos generales */
main {
  min-height: 100vh;
}

.py-5 {
  padding-top: 5rem;
  padding-bottom: 5rem;
}

/* Estilos para el carrusel de marcas */
.carousel-container {
  width: 100%;
  margin-bottom: 30px;
}

.carousel {
  display: flex;
  align-items: center;
  height: auto; /* Cambia esto a auto para permitir la altura automática según el contenido */
  overflow: hidden; /* Ocultamos cualquier contenido adicional fuera del carrusel */
  justify-content: space-between; /* Alineación de elementos */
}

/* Ajustamos el ancho de las columnas del carrusel para mostrar 4 marcas por fila */
.carousel-item {
  flex: 0 0 20%; /* Ancho fijo para mostrar 5 marcas por fila */
  max-width: 20%; /* Ancho fijo para mostrar 5 marcas por fila */
  display: flex;
  justify-content: center;
  padding: 2px; /* Ajustamos el espacio entre las marcas */
}

.brand-logo {
  max-height: 150px;
  max-width: 100%; /* Cambia el ancho máximo según tus necesidades */
}



/* Estilos para las tarjetas de productos */
.row {
  display: flex;
  flex-wrap: wrap;
  margin: -5px; /* Aumentamos el espacio entre las filas */
}

.col-md-4,
.col-sm-6 {
  padding: 5px; /* Aumentamos el espacio entre las tarjetas */
}

.card {
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  border: none;
  width: 100%; /* Las tarjetas ocuparán todo el ancho de su contenedor */
  max-width: calc(100% - 10px); /* Para asegurarnos de que haya 3 tarjetas por fila */
  margin-right: 10px; /* Añadimos margen derecho para separar las tarjetas */
  margin-bottom: 10px; /* Añadimos margen inferior para separar las filas */
}

.card:last-child {
  margin-right: 0; /* Eliminamos el margen derecho de la última tarjeta en la fila */
}

.card-img-top {
  height: 400px;
  object-fit: cover; /* Cambiamos a "cover" para ajustar la imagen al tamaño de la tarjeta */
  border-top-left-radius: 10px;
  border-top-right-radius: 10px;
}

.card-body {
  padding: 3.5rem;
}

h1.text-center {
  font-size: 2rem;
  margin-bottom: 0.5rem;
}


h4.card-title {
  font-size: 1.3rem;
  margin-bottom: 0.5rem;
}

p.card-text {
  font-size: 1rem;
  margin-bottom: 1rem;
}

.btn-group {
  margin-top: 15px;
}

.btn {
  margin-right: 8px;
}

small.text-muted {
  font-size: 1rem;
  font-weight: bolder;
  color: #999;
}


/* src\app\components\home\home.component.spec.ts */

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HomeComponent } from './home.component';

describe('HomeComponent', () => {
  let component: HomeComponent;
  let fixture: ComponentFixture<HomeComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [HomeComponent]
    });
    fixture = TestBed.createComponent(HomeComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* src\app\components\home\home.component.ts */

import { Component, OnInit, ViewChild } from '@angular/core';
import { ProductService } from '../services/product.service';
import { BrandService } from '../services/brand/brand.service';
import { Product } from '../../models/product.model';
import { Brand } from '../../models/brand.model';
import { SlickCarouselComponent } from 'ngx-slick-carousel';
import { DecimalPipe } from '@angular/common';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.scss']
})
export class HomeComponent implements OnInit {
  @ViewChild('slickModal', { static: true }) slickModal: SlickCarouselComponent;

  products: Product[] = [];
  brands: Brand[];

  carouselConfig: any = {
    slidesToShow: 4,
    slidesToScroll: 1,
    dots: true,
    arrows: true,
    autoplay: true,
    autoplaySpeed: 3000,
    infinite: true
  };

  constructor(
    private productService: ProductService,
    private brandService: BrandService,
    private decimalPipe: DecimalPipe
  ) {}

  ngOnInit() {
    this.productService.getProducts().subscribe((products: Product[]) => {
      // Obtener 6 productos aleatorios
      this.products = this.getRandomProducts(products, 6);
    });

    this.brandService.getBrands().subscribe((brands: Brand[]) => {
      this.brands = brands;
      this.updateCarousel();
    });
  }

  // Función para obtener productos aleatorios
  private getRandomProducts(products: Product[], count: number): Product[] {
    const randomProducts: Product[] = [];
    const totalProducts = products.length;

    if (totalProducts <= count) {
      return products;
    }

    const selectedIndices: number[] = [];

    while (randomProducts.length < count) {
      const randomIndex = Math.floor(Math.random() * totalProducts);

      if (!selectedIndices.includes(randomIndex)) {
        selectedIndices.push(randomIndex);
        randomProducts.push(products[randomIndex]);
      }
    }

    return randomProducts;
  }

  updateCarousel() {
    // Actualizar el número de slidesToShow del carrusel
    // según el número de marcas disponibles
    const numBrands = this.brands.length;
    this.carouselConfig.slidesToShow = Math.min(numBrands, 5);

    // Reiniciar el carrusel para reflejar los cambios
    if (this.slickModal) {
      this.slickModal.unslick();
      this.slickModal.initSlick();
    }
  }

  formatPriceWithThousandsSeparator(price: number | null): string {
    if (price == null) return '';
  
    // Usar toLocaleString para agregar separadores de miles
    const formattedPrice = price.toLocaleString(undefined, { minimumFractionDigits: 0 });
  
    // Reemplazar la coma por un punto
    return formattedPrice.replace(',', '.');
  }
}


/* src\app\components\layout\footer\footer.component.html */

<footer class="bg-dark text-white py-5">
    <div class="container">
      <div class="row">
        <div class="col-md-4">
          <h5>PowerFitness</h5>
          <p>Tienda de artículos deportivos en Bogotá, Colombia. Envíos a todo el país.</p>
          <p>Teléfono: +573124193753</p>
        </div>
        <div class="col-md-4">
          <h5>Enlaces</h5>
          <ul class="list-unstyled">
            <li><a href="#">Inicio</a></li>
            <li><a href="#">Categorías</a></li>
            <li><a href="#">Productos</a></li>
            <li><a href="#">Nosotros</a></li>
            <li><a href="#">Descuentos</a></li>
            <li><a href="#">Contacto</a></li>
          </ul>
        </div>
        <div class="col-md-4">
          <h5>Síguenos</h5>
          <ul class="list-unstyled">
            <li><a href="#">Facebook</a></li>
            <li><a href="#">Twitter</a></li>
            <li><a href="#">Instagram</a></li>
          </ul>
        </div>
      </div>
      <hr>
      <p class="text-muted small mb-0">© 2023 PowerFitness</p>
    </div>
  </footer>
  

/* src\app\components\layout\footer\footer.component.scss */



/* src\app\components\layout\footer\footer.component.spec.ts */

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { FooterComponent } from './footer.component';

describe('FooterComponent', () => {
  let component: FooterComponent;
  let fixture: ComponentFixture<FooterComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [FooterComponent]
    });
    fixture = TestBed.createComponent(FooterComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* src\app\components\layout\footer\footer.component.ts */

import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-footer',
  templateUrl: './footer.component.html',
  styleUrls: ['./footer.component.scss']
})
export class FooterComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

}


/* src\app\components\layout\header\header.component.html */



/* src\app\components\layout\header\header.component.scss */



/* src\app\components\layout\header\header.component.spec.ts */

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HeaderComponent } from './header.component';

describe('HeaderComponent', () => {
  let component: HeaderComponent;
  let fixture: ComponentFixture<HeaderComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [HeaderComponent]
    });
    fixture = TestBed.createComponent(HeaderComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* src\app\components\layout\header\header.component.ts */

import { Component, OnInit } from '@angular/core';
import { NavbarComponent } from '../../navbar/navbar.component';

@Component({
  selector: 'app-header',
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.scss']
})
export class HeaderComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

}


/* src\app\components\logout\logout.component.html */

<p>logout works!</p>


/* src\app\components\logout\logout.component.scss */



/* src\app\components\logout\logout.component.spec.ts */

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LogoutComponent } from './logout.component';

describe('LogoutComponent', () => {
  let component: LogoutComponent;
  let fixture: ComponentFixture<LogoutComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ LogoutComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(LogoutComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* src\app\components\logout\logout.component.ts */

import { Component } from '@angular/core';

@Component({
  selector: 'app-logout',
  templateUrl: './logout.component.html',
  styleUrls: ['./logout.component.scss']
})
export class LogoutComponent {

}


/* src\app\components\navbar\navbar.component.html */

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
      <a class="navbar-brand" routerLink="/">PowerFitness</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNavDropdown">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link" routerLink="/home" routerLinkActive="active">Inicio</a>
          </li>
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" routerLink="/categorias" id="navbarDropdownMenuLink" role="button" data-bs-toggle="dropdown" aria-expanded="false">
              Categorías
            </a>
            <ul class="dropdown-menu" aria-labelledby="navbarDropdownMenuLink">
              <li><a class="dropdown-item" href="#">Proteínas</a></li>
              <li><a class="dropdown-item" href="#">Pre-entrenamientos</a></li>
              <li><a class="dropdown-item" href="#">Quemadores de grasa</a></li>
              <li><a class="dropdown-item" href="#">Vitaminas y minerales</a></li>
              <li><a class="dropdown-item" href="#">Accesorios de entrenamiento</a></li>
              <li><a class="dropdown-item" href="#">Ropa deportiva</a></li>
            </ul>
          </li>
          <li class="nav-item">
            <a class="nav-link" routerLink="/product-list" routerLinkActive="active">Productos</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" routerLink="/nosotros" routerLinkActive="active">Nosotros</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" routerLink="/sale" routerLinkActive="active">Ofertas!</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" routerLink="/contact" routerLinkActive="active">Contacto</a>
          </li>
        </ul>
        <form class="d-flex" (ngSubmit)="searchForm.ngSubmit.emit()">
          <input class="form-control me-2" type="search" placeholder="Buscar" aria-label="Buscar" [(ngModel)]="searchQuery" name="searchQuery">
          <button class="btn btn-outline-success" type="submit">Buscar</button>
        </form>
        <ul class="navbar-nav mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link" routerLink="/login-form" routerLinkActive="active">Iniciar Sesión</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" routerLink="/register" routerLinkActive="active">Registro</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" routerLink="/cart" routerLinkActive="active">
              <span class="bi bi-cart"></span>
              <span class="cart-items">{{ cartItemCount }}</span>
            </a>
          </li>
        </ul>
      </div>
    </div>
  </nav>


/* src\app\components\navbar\navbar.component.scss */

@import '../../../../node_modules/bootstrap/scss/bootstrap';
@import '~bootstrap-icons/font/bootstrap-icons.css';
//@import '../../../../node_modules/bootstrap/';

// Variables de color
$primary-color: #511a87;
$secondary-color: #fff;
$color-change-percentage: 10%;

// Estilos para la barra de navegación
.navbar {
  background: linear-gradient(to bottom, $primary-color, $primary-color $color-change-percentage, $primary-color);

  .navbar-brand {
    font-size: 30px;
    font-weight: bold;
    color: $secondary-color;

    &:hover {
      color: $secondary-color;
    }
  }

  .nav-link {
    color: $secondary-color;

    &:hover, &:active, &.active {
      color: $secondary-color;
    }
  }

  .dropdown-menu {
    background-color: $primary-color;

    .dropdown-item {
      color: $secondary-color;

      &:hover {
        color: $secondary-color;
        background-color: lighten($primary-color, $color-change-percentage);
      }
    }
  }

  .form-control {
    background-color: lighten($primary-color, $color-change-percentage);
    color: $secondary-color;

    &::placeholder {
      color: $secondary-color;
    }
  }

  .btn-outline-success {
    color: $secondary-color;
    border-color: $secondary-color;

    &:hover {
      color: $primary-color;
      background-color: $secondary-color;
    }
  }

  .bi-cart {
    font-size: 1.5rem;
    color: $secondary-color;

    &:hover {
      color: $secondary-color;
    }
  }

  .bi.bi-cart {
    font-size: 1.5rem;
    color: $secondary-color;

    &:hover {
      color: $secondary-color;
    }
    .cart-items {
      background-color: #ff0000;  // Color de fondo para el número de elementos
      color: #ffffff;  // Color del texto para el número de elementos
      font-size: 12px;  // Tamaño de fuente para el número de elementos
      border-radius: 50%;  // Forma redondeada para crear un círculo
      padding: 2px 6px;  // Espaciado interno para el número de elementos
      position: absolute;  // Posición absoluta para colocar el número sobre el ícono
      top: -5px;  // Ajuste vertical para posicionar el número correctamente
      right: -5px;  // Ajuste horizontal para posicionar el número correctamente
    }
  }
}

/* src\app\components\navbar\navbar.component.spec.ts */

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { NavbarComponent } from './navbar.component';

describe('NavbarComponent', () => {
  let component: NavbarComponent;
  let fixture: ComponentFixture<NavbarComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [NavbarComponent]
    });
    fixture = TestBed.createComponent(NavbarComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* src\app\components\navbar\navbar.component.ts */

import { Component, ViewChild, OnInit } from '@angular/core';
import { NgForm } from '@angular/forms';
import { CartService } from '../services/cart.service';
import { ProductService } from '../services/product.service';

@Component({
  selector: 'app-navbar',
  templateUrl: './navbar.component.html',
  styleUrls: ['./navbar.component.scss']
})

export class NavbarComponent implements OnInit {
  @ViewChild('searchForm') searchForm: NgForm;
  searchQuery: string;

  cartItemCount: number = 0;  // Variable para almacenar el número de elementos en el carrito

  constructor(private productService: ProductService) {}

  ngOnInit() {
    this.productService.addToCart$.subscribe(() => {
      this.cartItemCount++;
    });
  }

  // ...
}

/* src\app\components\nosotros\nosotros.component.html */

<section class="nosotros">
  <div class="container">
    <h2 class="nosotros-title">Bienvenidos a PowerFitness</h2>
    <p class="nosotros-description">
      En nuestro compromiso por ayudarte a alcanzar tus objetivos de manera eficiente y segura, te ofrecemos una amplia variedad de productos y servicios especializados en el ámbito deportivo.
    </p>
    <p class="nosotros-description">
    Nos especializamos en la venta de  suplementos deportivos de alta calidad, entre los que destacan nuestra selección de proteínas, pre-entrenamientos, quemadores de grasa, vitaminas y minerales, así como accesorios de entrenamiento y ropa deportiva.
    Contamos con las mejores marcas del mercado para garantizarte los resultados que esperas, sin comprometer tu salud ni seguridad. Todos nuestros productos son seleccionados cuidadosamente y sometidos a rigurosos controles de calidad para garantizar que cumplen con los estándares más exigentes.
    </p>
    <p class="nosotros-description">
      Además, en PowerFitness no solo te ofrecemos productos de calidad, sino también asesoramiento personalizado para que puedas elegir los suplementos deportivos que mejor se adapten a tus necesidades y objetivos. Nos enfocamos en entender tus necesidades específicas para ofrecerte recomendaciones personalizadas y así puedas alcanzar tus metas de forma más efectiva.
    </p>
    <p class="nosotros-description">
      En definitiva, en PowerFitness estamos comprometidos en ser tu aliado en el camino hacia una vida más saludable y activa, ofreciéndote siempre los mejores productos y servicios para que puedas alcanzar tus metas de forma eficiente y segura. No dudes en visitar nuestra tienda virtual y comprobar por ti mismo la calidad de nuestra oferta.
    </p>
    <a class="nosotros-button" href="product-list">Explora nuestros productos</a>
  </div>
</section>


/* src\app\components\nosotros\nosotros.component.scss */

/* Estilos para la sección "Nosotros" */

.nosotros-section {
  background-color: #f8f8f8;
  padding: 60px 0;
  text-align: center;
}

.nosotros-title {
  font-size: 36px;
  font-weight: 600;
  margin-bottom: 30px;
}

.nosotros-description {
  font-size: 20px;
  line-height: 1.5;
  margin-bottom: 60px;
}

.nosotros-cards {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
}

.nosotros-card {
  background-color: #fff;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 20px;
  text-align: center;
  margin-bottom: 30px;
  width: 30%;
}

.nosotros-card-icon {
  font-size: 50px;
  margin-bottom: 20px;
}

.nosotros-card-title {
  font-size: 24px;
  font-weight: 600;
  margin-bottom: 20px;
}

.nosotros-card-description {
  font-size: 16px;
  line-height: 1.5;
  margin-bottom: 20px;
}

.nosotros-card-link {
  background-color: #008CBA;
  border: none;
  border-radius: 5px;
  color: #fff;
  font-size: 16px;
  font-weight: 600;
  padding: 10px 20px;
  text-align: center;
  text-decoration: none;
  transition: background-color 0.3s ease;
}

.nosotros-card-link:hover {
  background-color: #006E8A;
}

@media screen and (max-width: 768px) {
  .nosotros-cards {
    justify-content: center;
  }

  .nosotros-card {
    width: 45%;
  }
}


/* src\app\components\nosotros\nosotros.component.spec.ts */

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { NosotrosComponent } from './nosotros.component';

describe('NosotrosComponent', () => {
  let component: NosotrosComponent;
  let fixture: ComponentFixture<NosotrosComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [NosotrosComponent]
    });
    fixture = TestBed.createComponent(NosotrosComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* src\app\components\nosotros\nosotros.component.ts */

import { Component } from '@angular/core';

@Component({
  selector: 'app-nosotros',
  templateUrl: './nosotros.component.html',
  styleUrls: ['./nosotros.component.scss']
})
export class NosotrosComponent {

}


/* src\app\components\product-import\product-import.component.html */

<div>
    <h1>Product Import</h1>
    <input type="file" #fileInput (change)="handleFileInput(fileInput)">
    <button (click)="importCSV()"> Import CSV </button>
  </div>

/* src\app\components\product-import\product-import.component.scss */



/* src\app\components\product-import\product-import.component.spec.ts */

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ProductImportComponent } from './product-import.component';

describe('ProductImportComponent', () => {
  let component: ProductImportComponent;
  let fixture: ComponentFixture<ProductImportComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ProductImportComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ProductImportComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* src\app\components\product-import\product-import.component.ts */

import { Component } from '@angular/core';
import { CsvParserService } from '../../services/csv-parser.service';

@Component({
  selector: 'app-product-import',
  templateUrl: './product-import.component.html',
  styleUrls: ['./product-import.component.scss']
})
export class ProductImportComponent {
  file: File;

  constructor(private csvParserService: CsvParserService) {}

  handleFileInput(input: HTMLInputElement): void {
    const files = input.files;
    if (files && files.length > 0) {
      this.file = files[0];
    }
  }

  importCSV(): void {
    if (this.file) {
      this.csvParserService.importProductsFromCSV(this.file);
    }
  }
}


/* src\app\components\product-management\product-management.component.html */

<div>
  <h1>Product Management</h1>
  <input type="file" #fileInput (change)="handleFileInput(fileInput)">
  <button (click)="exportToCSV()">Exportar CSV</button>
</div>


/* src\app\components\product-management\product-management.component.scss */

/* Add any custom styles for the product management component here */


/* src\app\components\product-management\product-management.component.spec.ts */

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ProductManagementComponent } from './product-management.component';

describe('ProductManagementComponent', () => {
  let component: ProductManagementComponent;
  let fixture: ComponentFixture<ProductManagementComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ ProductManagementComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ProductManagementComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* src\app\components\product-management\product-management.component.ts */

import { Component } from '@angular/core';
import { CsvWriterService } from '../../services/csv-writer.service';
import { ProductService } from '../services/product.service';
import { Product } from '../../models/product.model';

@Component({
  selector: 'app-product-management',
  templateUrl: './product-management.component.html',
  styleUrls: ['./product-management.component.scss']
})
export class ProductManagementComponent {
  file: File;

  constructor(
    private csvWriterService: CsvWriterService,
    private productService: ProductService
  ) {}

  handleFileInput(input: HTMLInputElement): void {
    const files = input.files;
    if (files && files.length > 0) {
      this.file = files[0];
    }
  }

  exportToCSV(): void {
    this.productService.getProducts().subscribe((products: Product[]) => {
      this.csvWriterService.generateCSV(products);
    });
  }
}


/* src\app\components\products\product\product.component.html */

<p>product works!</p>


/* src\app\components\products\product\product.component.scss */



/* src\app\components\products\product\product.component.spec.ts */

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ProductComponent } from './product.component';

describe('ProductComponent', () => {
  let component: ProductComponent;
  let fixture: ComponentFixture<ProductComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [ProductComponent]
    });
    fixture = TestBed.createComponent(ProductComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* src\app\components\products\product\product.component.ts */

import { Component } from '@angular/core';

@Component({
  selector: 'app-product',
  templateUrl: './product.component.html',
  styleUrls: ['./product.component.scss']
})
export class ProductComponent {

}


/* src\app\components\products\product-detail\product-detail.component.html */

<!-- product-detail.component.html -->
<div class="container" *ngIf="product">
    <div class="row">
      <div class="col-12">
        <div class="card product">
          <div class="image-wrapper">
            <div class="image-container">
              <button class="arrow left-arrow" (click)="setCurrentImageIndex(currentImageIndex - 1)">&lt;</button>
              <div class="images">
                <img class="card-img-top product-image" [src]="product.imageUrl || ''" alt="{{ product.name }}" />
              </div>
              <button class="arrow right-arrow" (click)="setCurrentImageIndex(currentImageIndex + 1)">&gt;</button>
            </div>
          </div>
          <div class="card-body">
            <h5 class="card-title product-name">{{ product.name }}</h5>
            <p class="card-text product-category" *ngIf="product?.category?.length">
              Categoría: {{ product.category }}
            </p>
            <p class="card-text product-brand" *ngIf="product?.brand?.length">Marca: {{ product.brand }}</p>
            <p class="card-text product-size" *ngIf="product?.sizes?.length">
              Tamaño:
              <select [(ngModel)]="product.selectedSize" (change)="filterProductsBySize()">
                <option *ngFor="let size of product.sizes" [value]="size">{{ size }}</option>
              </select>
            </p>
            <p class="card-text product-size" *ngIf="product?.size?.length">Tamaño: {{ product.size }}</p>
            <p class="card-text product-flavor" *ngIf="product?.flavors?.length">
              Sabor:
              <select [(ngModel)]="product.selectedFlavor" (change)="filterProductsByFlavor()">
                <option *ngFor="let flavor of product.flavors" [value]="flavor">{{ flavor }}</option>
              </select>
            </p>
            <p class="card-text product-flavor" *ngIf="product?.flavors?.length === 1">Sabor: {{ product.flavors[0] }}</p>
            <p class="card-text product-stock" *ngIf="product?.stock !== undefined && product.stock !== 0">
              Stock: {{ product.stock }}
            </p>
            <p class="card-text product-description" *ngIf="product?.description">{{ product.description }}</p>
            <p class="card-text product-discount" *ngIf="product?.discount !== undefined && product.discount !== 0">
              Descuento: {{ product.discount }}
            </p>
            <p class="card-text product-price" *ngIf="product?.price !== undefined && product.price !== 0">
              {{ formatPrice(product.price || 0) }}
            </p>
            <button class="btn btn-primary add-to-cart-button" (click)="addProduct(product)">Añadir al Carrito</button>
          </div>
        </div>
      </div>
    </div>
  </div>
  

/* src\app\components\products\product-detail\product-detail.component.scss */

@import '../../../../../node_modules/bootstrap/scss/bootstrap';
@import '~bootstrap/dist/css/bootstrap.min.css';

.container {
  padding: 20px 0;

  .card.product {
    .image-wrapper {
      .image-container {
        display: flex;
        align-items: left;

        .arrow {
          font-size: 24px;
          background-color: transparent;
          border: none;
          color: #333;
          cursor: pointer;
        }

        .left-arrow {
          margin-right: 10px;
        }

        .right-arrow {
          margin-left: 10px;
        }

        .images {
          flex-grow: 1;
          display: flex;
          justify-content: left;
          align-items: left;

          .card-img-top.product-image {
            max-width: 100%;
            max-height: 500px;
            object-fit: contain;
          }
        }
      }
    }

    .card-body {
      .card-title.product-name {
        font-size: 24px;
        margin-bottom: 20px;
      }

      .card-text.product-category,
      .card-text.product-brand {
        margin-bottom: 5px;
      }

      .card-text.product-size {
        margin-bottom: 5px;

        select {
          margin-left: 5px;
        }
      }

      .card-text.product-flavor {
        margin-bottom: 5px;

        select {
          margin-left: 5px;
        }
      }

      .card-text.product-stock,
      .card-text.product-discount,
      .card-text.product-price {
        margin-bottom: 5px;
      }

      .card-text.product-description {
        margin-bottom: 20px;
      }

      .btn.btn-primary.add-to-cart-button {
        margin-top: 10px;
      }
    }
  }
}


/* src\app\components\products\product-detail\product-detail.component.spec.ts */

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ProductDetailComponent } from './product-detail.component';

describe('ProductDetailComponent', () => {
  let component: ProductDetailComponent;
  let fixture: ComponentFixture<ProductDetailComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [ProductDetailComponent]
    });
    fixture = TestBed.createComponent(ProductDetailComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* src\app\components\products\product-detail\product-detail.component.ts */

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { ProductService } from '../../services/product.service';
import { Product } from '../../../models/product.model';
import { CartService } from '../../services/cart.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-product-detail',
  templateUrl: './product-detail.component.html',
  styleUrls: ['./product-detail.component.scss'],
})
export class ProductDetailComponent implements OnInit {
  products: Product[] = [];
  selectedSize: string = '';
  selectedFlavor: string = '';
  selectedCategory: string = '';
  productCategories: string[] = [];
  productSizes: string[] = [];
  productFlavors: string[] = [];
  filteredProducts: Product[] = [];
  confirmationMessage: string = '';
  currentImageIndex: number = 0;
  product: Product | undefined;

  constructor(
    private productService: ProductService,
    private cartService: CartService,
    private route: ActivatedRoute,
    private router: Router
  ) {}

  ngOnInit() {
    const productId = this.route.snapshot.params['id'];
    this.productService.getProducts().subscribe(
      (products: Product[]) => {
        this.product = products.find(product => product.id === productId);
        if (!this.product) {
          console.error('Product not found');
        }
      },
      (error: any) => {
        console.error('Error retrieving products:', error);
      }
    );
  }  

  getProduct(): void {
    const id = this.route.snapshot.paramMap.get('id');
    if (id) {
      this.productService.getProductById(id).subscribe(
        (product: Product) => {
          if (product) {
            this.product = product;
          } else {
            console.error('Product not found');
          }
        },
        (error: any) => {
          console.error(error);
        }
      );
    }
  }
  
  setCurrentImageIndex(index: number): void {
    this.currentImageIndex = index;
  }

  formatPrice(price: number): string {
    return price.toLocaleString('es-ES');
  }

  addProduct(product: Product): void {
    if ((product.flavors && product.flavors.length > 0 && !product.selectedFlavor) || (product.sizes && product.sizes.length > 0 && !product.selectedSize)) {
      this.confirmationMessage = '';
      return;
    }
    
    const selectedProduct = { ...product };
    this.selectedSize = this.selectedSize;
    this.selectedFlavor = this.selectedFlavor;

    this.cartService.addProduct(selectedProduct);
    this.productService.addProductToCart(selectedProduct);
    this.confirmationMessage = 'Producto agregado al carrito: ' + product.name;

    this.selectedSize = '';
    this.selectedFlavor = '';
  }
  

  filterProductsBySize(): void {
    if (this.selectedSize) {
      this.filteredProducts = this.products.filter(
        (product) => product.size === this.selectedSize
      );
    } else {
      this.filteredProducts = [...this.products];
    }
  }

  filterProductsByFlavor(): void {
    if (this.selectedFlavor) {
      this.filteredProducts = this.products.filter(
        (product) => product.flavors.includes(this.selectedFlavor)
      );
    } else {
      this.filteredProducts = [...this.products];
    }
  }

  checkAvailability(product: Product): void {
    const selectedProduct = { ...product };
    if (selectedProduct.id !== undefined) {
      selectedProduct.id = selectedProduct.id.toString();
      this.productService
        .getProductById(selectedProduct.id)
        .subscribe((dbProduct: Product) => {
          // ...
        });
    } else {
      // Manejar el caso en que el ID del producto sea undefined
    }
  }
}

/* src\app\components\products\product-list\product-list.component.html */

<!-- product-list.component.html -->
<div class="container">
  <div class="row">
    <div class="col-12 col-lg-3">
      <div class="category-menu">
        <h5>Categorías:</h5>
        <ul>
          <li *ngFor="let category of productCategories" (click)="filterProductsByCategory(category)">
            {{ category }}
          </li>
        </ul>
      </div>
    </div>

    <div class="col-12 col-lg-9">
      <div class="row">
        <div *ngIf="confirmationMessage" class="confirmation-message col-12">
          {{ confirmationMessage }}
        </div>
        <div class="col-12 col-md-6 col-lg-4" *ngFor="let product of filteredProducts">
          <div class="card product">
            <div class="image-wrapper">
              <div class="image-container">
                <button class="arrow left-arrow" (click)="scrollImages(product, -1)">&lt;</button>
                <div class="images">
                  <img class="card-img-top product-image" [src]="product.imageUrl[currentImageIndex]" alt="{{ product.name }}" />
                </div>
                <button class="arrow right-arrow" (click)="scrollImages(product, 1)">&gt;</button>
              </div>
            </div>
            <div class="card-body">
              <h5 class="card-title product-name">
                <a *ngIf="product.id" (click)="viewProductDetails(product.id)" [title]="product.name">{{ product.name }}</a>
                <span *ngIf="!product.id" [title]="product.name">{{ product.name }}</span>
              </h5>
              <p class="card-text product-category" *ngIf="product.category && product.category.length > 0">
                Categoría: {{ product.category }}
              </p>
              <p class="card-text product-brand" *ngIf="product.brand && product.brand.length > 0">Marca: {{ product.brand }}</p>
              <p class="card-text product-size" *ngIf="product.sizes && product.sizes.length > 0">
                Tamaño:
                <select [(ngModel)]="product.selectedSize" (change)="filterProductsBySize()">
                  <option *ngFor="let size of product.sizes" [value]="size">{{ size }}</option>
                </select>
              </p>
              <p class="card-text product-size" *ngIf="product.size && product.size.length > 0">
                Tamaño: {{ product.size }}
              </p>
              <p class="card-text product-flavor" *ngIf="product.flavors && product.flavors.length > 0">
                Sabor:
                <select [(ngModel)]="product.selectedFlavor" (change)="filterProductsByFlavor()">
                  <option *ngFor="let flavor of product.flavors" [value]="flavor">{{ flavor }}</option>
                </select>
              </p>
              <p class="card-text product-flavor" *ngIf="product.flavors && product.flavors.length === 1">
                Sabor: {{ product.flavors[0] }}
              </p>
              <p class="card-text product-stock" *ngIf="product.stock !== undefined && product.stock !== 0">
                Stock: {{ product.stock }}
              </p>
              <p class="card-text product-description" *ngIf="product.description">{{ product.description }}</p>
              <p class="card-text product-discount" *ngIf="product.discount !== undefined && product.discount !== 0">
                Descuento: {{ product.discount }}
              </p>
              <p class="card-text product-price" *ngIf="product.price !== undefined && product.price !== 0">
               ${{ formatPrice(product.price) }}
              </p>
              <button class="btn btn-primary add-to-cart-button" (click)="addProduct(product)">Añadir al Carrito</button>
              <button class="btn btn-primary view-more-button" *ngIf="product.id" (click)="viewProductDetails(product.id)">Ver más</button>
              <p class="error-message" *ngIf="product.flavors && product.flavors.length > 0 && !product.selectedFlavor">Selecciona un sabor</p>
              <p class="error-message" *ngIf="product.sizes && product.sizes.length > 0 && !product.selectedSize">Selecciona un tamaño</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


/* src\app\components\products\product-list\product-list.component.scss */

/* Estilos generales */
.container {
  display: flex;
  margin-top: 20px;

  // Menú de categorías
  .category-menu {
    position: sticky;
    left: 0;
    width: 200px;
    background-color: #f2f2f2;
    padding: 10px;
    border-right: 1px solid #ccc;
    margin-left: -50px;

    h5 {
      font-size: 25px;
      font-weight: bold;
      margin-bottom: 10px;
      color: #333;
    }

    ul {
      list-style: none;
      padding-left: 0;

      li {
        cursor: pointer;
        margin-bottom: 5px;
        border-radius: 5px;
        font-size: 18px;
        transition: all 0.2s ease;
        color: #000;
        background-color: #fff;

        &:hover {
          color: #ff6b6b;
        }
      }
    }
  }
}

// Tarjetas de productos
.product {
  margin-bottom: 5px;
  position: sticky;
  margin-left: -15px; // Elimina el margen izquierdo para alinear a la izquierda

  .image-wrapper {
    position: relative;

    .image-container {
      position: relative;
      overflow: hidden;

      .images {
        display: flex;
        transition: transform 0.5s ease;
      }

      .left-arrow,
      .right-arrow {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background-color: transparent;
        border: none;
        color: black;
        font-size: 20px;
        padding: 8px;
        cursor: pointer;

        &.left-arrow {
          left: 0;
        }

        &.right-arrow {
          right: 0;
        }
      }
    }
  }

  .card-body {
    .card-title {
      font-size: 20px;
      font-weight: bold;
      margin-bottom: 10px;
    }

    .card-text {
      font-size: 14px;
      margin-bottom: 5px;
      text-align: justify;
    }

    .product-name {
      margin-bottom: 0;
      cursor: pointer;
      text-decoration: underline;

      &:hover {
        color: #ff6b6b;
      }
    }

    .product-category,
    .product-brand,
    .product-size,
    .product-flavor,
    .product-stock,
    .product-description,
    .product-discount {
      margin-bottom: 5px;

    }

    .product-price {
      font-size: 15px;
      margin-bottom: 5px;
      font-weight: bolder;
    }

    .add-to-cart-button {
      margin-top: 10px;
      margin-right: 5px;
    }

    .view-more-button {
      margin-top: 10px;
    }
  }
}

// Mensaje de confirmación
.confirmation-message {
  background-color: #dff0d8;
  color: #3c763d;
  border: 1px solid #d6e9c6;
  border-radius: 3px;
  padding: 10px;
  margin-bottom: 20px;
}

@media (max-width: 767px) {
  // Estilos para pantallas pequeñas
  .category-menu {
    height: 80px;
    padding: 10px;

    h5 {
      font-size: 16px;
      margin-bottom: 8px;
    }

    ul {
      li {
        font-size: 12px;
      }
    }
  }
}

@media (min-width: 768px) {
  // Estilos para pantallas medianas
  .col-lg-4 { // Ajustar el ancho de las tarjetas
    flex-basis: 33.33%;
    max-width: 33.33%;
  }
}

@media (min-width: 992px) {
  // Estilos para pantallas grandes
  .col-lg-4 { // Ajustar el ancho de las tarjetas
    flex-basis: 33.33%;
    max-width: 33.33%;
  }
}


/* src\app\components\products\product-list\product-list.component.spec.ts */

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ProductListComponent } from './product-list.component';

describe('ProductListComponent', () => {
  let component: ProductListComponent;
  let fixture: ComponentFixture<ProductListComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [ProductListComponent]
    });
    fixture = TestBed.createComponent(ProductListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* src\app\components\products\product-list\product-list.component.ts */

// product-list.component.ts
import { Component, OnInit } from '@angular/core';
import { ProductService } from '../../services/product.service';
import { Product } from '../../../models/product.model';
import { CartService } from '../../services/cart.service';
import { Router } from '@angular/router';
import { ImageIndexMixin } from '../../services/product/image-index.mixin';

// Extiende el tipo Product con la interfaz ImageIndexMixin
type ProductWithImageIndex = Product & ImageIndexMixin;

@Component({
  selector: 'app-product-list',
  templateUrl: 'product-list.component.html',
  styleUrls: ['product-list.component.scss'],
})
export class ProductListComponent implements OnInit {
  products: ProductWithImageIndex[] = [];
  selectedSize: string = '';
  selectedFlavor: string = '';
  selectedCategory: string = '';
  productCategories: string[] = [];
  productSizes: string[] = [];
  productFlavors: string[] = [];
  filteredProducts: Product[] = [];
  confirmationMessage: string = '';
  currentImageIndex: number = 0;
  

  constructor(
    private productService: ProductService,
    private cartService: CartService,
    private router: Router
  ) {}

  ngOnInit() {
    this.productService.getProducts().subscribe((products: Product[]) => {
      this.products = products.map((product) => ({
        ...product,
        selectedSize: '',
        selectedFlavor: '',
      }));

      this.productCategories = Array.from(new Set(this.products.map((product) => product.category)));
      this.productSizes = Array.from(new Set(this.products.map((product) => product.size)));
      this.productFlavors = Array.from(new Set(this.products.flatMap((product) => product.flavors)));
      this.filteredProducts = [...this.products];
    });
  }

  addProduct(product: Product): void {
    if ((product.flavors && product.flavors.length > 0 && !product.selectedFlavor) || (product.sizes && product.sizes.length > 0 && !product.selectedSize)) {
      this.confirmationMessage = '';
      return;
    }
    
    const selectedProduct = { ...product };
    this.selectedSize = this.selectedSize;
    this.selectedFlavor = this.selectedFlavor;

    this.cartService.addProduct(selectedProduct);
    this.productService.addProductToCart(selectedProduct);
    this.confirmationMessage = 'Producto agregado al carrito: ' + product.name;

    this.selectedSize = '';
    this.selectedFlavor = '';
  }

  scrollImages(product: ProductWithImageIndex, direction: number): void {
    const imageUrls = product.imageUrl;
    const lastIndex = imageUrls.length - 1;
  
    // Obtén el índice actual de la imagen para este producto
    const currentImageIndex = product.currentImageIndex || 0;
  
    // Calcula el nuevo índice
    let newImageIndex = currentImageIndex + direction;
  
    if (newImageIndex > lastIndex) {
      newImageIndex = 0;
    } else if (newImageIndex < 0) {
      newImageIndex = lastIndex;
    }
  
    // Actualiza el índice de la imagen para este producto
    product.currentImageIndex = newImageIndex;
  }
  
  checkAvailability(product: Product): void {
    const selectedProduct = { ...product };
    if (selectedProduct.id !== undefined) {
      selectedProduct.id = selectedProduct.id.toString();
      this.productService
        .getProductById(selectedProduct.id)
        .subscribe((dbProduct: Product) => {
          // ...
        });
    } else {
      // Manejar el caso en que el ID del producto sea undefined
    }
  }

  filterProductsByCategory(category?: string): void {
    if (category) {
      this.selectedCategory = category;
      this.filteredProducts = this.products.filter(
        (product) => product.category === category
      );
    } else {
      this.selectedCategory = '';
      this.filteredProducts = [...this.products];
    }
  }

  filterProductsBySize(): void {
    if (this.selectedSize) {
      this.filteredProducts = this.products.filter(
        (product) => product.size === this.selectedSize
      );
    } else {
      this.filteredProducts = [...this.products];
    }
  }

  filterProductsByFlavor(): void {
    if (this.selectedFlavor) {
      this.filteredProducts = this.products.filter(
        (product) => product.flavors.includes(this.selectedFlavor)
      );
    } else {
      this.filteredProducts = [...this.products];
    }
  }

  formatPrice(price: number): string {
    return price.toLocaleString('es-ES');
  }

  viewProductDetails(productId: string): void {
    this.router.navigate(['/products', productId]);
  }
}


/* src\app\components\search\search.component.html */

<form class="d-flex" (ngSubmit)="searchProducts()">
    <input class="form-control me-2" type="search" placeholder="Buscar" aria-label="Buscar" [(ngModel)]="searchQuery" name="searchQuery">
    <button class="btn btn-outline-success" type="submit">Buscar</button>
  </form>
  

/* src\app\components\search\search.component.scss */



/* src\app\components\search\search.component.spec.ts */

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { SearchComponent } from './search.component';

describe('SearchComponent', () => {
  let component: SearchComponent;
  let fixture: ComponentFixture<SearchComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [SearchComponent]
    });
    fixture = TestBed.createComponent(SearchComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* src\app\components\search\search.component.ts */

import { Component } from '@angular/core';

@Component({
  selector: 'app-search',
  templateUrl: './search.component.html',
  styleUrls: ['./search.component.scss']
})
export class SearchComponent {
  searchQuery: string;

  searchProducts(): void {
    // Aquí puedes agregar la lógica para realizar la búsqueda
    console.log('Realizando búsqueda: ' + this.searchQuery);
  }
}


/* src\app\components\services\auth\auth.service.spec.ts */

import { TestBed } from '@angular/core/testing';

import { AuthService } from './auth.service';

describe('AuthService', () => {
  let service: AuthService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(AuthService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});


/* src\app\components\services\auth\auth.service.ts */

// auth.service.ts
import { Injectable } from '@angular/core';
import { AngularFireAuth } from '@angular/fire/compat/auth';
import { Observable, from, throwError } from 'rxjs';
import { User, UserCredential } from '@firebase/auth-types';
import firebase from 'firebase/compat/app';
import 'firebase/compat/auth';
import { AngularFirestore } from '@angular/fire/compat/firestore';
import { Subscription } from 'rxjs';
import { switchMap, take, catchError } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  logout() {
    throw new Error('Method not implemented.');
  }
  user$: Observable<User | null>;

  constructor(private afAuth: AngularFireAuth, private firestore: AngularFirestore) {
    this.user$ = this.afAuth.authState;
  }

  signUpWithEmailAndPassword(email: string, password: string): Observable<UserCredential> {
    return from(this.afAuth.createUserWithEmailAndPassword(email, password)).pipe(
      catchError((error) => {
        console.error('Error signing up:', error);
        return throwError(error);
      })
    );
  }  

  signInWithGoogle(): Observable<UserCredential> {
    const provider = new firebase.auth.GoogleAuthProvider();
    return from(this.afAuth.signInWithPopup(provider)).pipe(
      catchError((error) => {
        console.error('Error signing in with Google:', error);
        return throwError(error);
      })
    );
  }  

  signInWithFacebook(): Observable<UserCredential> {
    const provider = new firebase.auth.FacebookAuthProvider();
    return from(this.afAuth.signInWithPopup(provider)).pipe(
      catchError((error) => {
        console.error('Error signing in with Facebook:', error);
        return throwError(error);
      })
    );
  }

  signOut(): Promise<void> {
    return this.afAuth.signOut().catch((error) => {
      console.error('Error signing out:', error);
      throw error;
    });
  }
  
  updateUserProfile(name: string, email: string): Observable<void> {
    return this.getCurrentUser().pipe(
      switchMap((user) => {
        if (user) {
          const userId = user.uid;
          return from(this.firestore.collection('users').doc(userId).update({ name, email })).pipe(
            catchError((error) => {
              console.error('Error updating user profile:', error);
              return throwError(error);
            })
          );
        } else {
          return throwError(new Error('User not authenticated'));
        }
      })
    );
  }

  changeUserPassword(currentPassword: string, newPassword: string): Observable<void> {
    return this.getCurrentUser().pipe(
      switchMap((user) => {
        if (user) {
          const credential = firebase.auth.EmailAuthProvider.credential(user.email || '', currentPassword);
          return from(user.reauthenticateWithCredential(credential)).pipe(
            switchMap(() => from(user.updatePassword(newPassword))),
            catchError((error) => {
              console.error('Error changing password:', error);
              return throwError(error);
            })
          );
        } else {
          return throwError(new Error('User not authenticated'));
        }
      })
    );
  }

  getCurrentUser(): Observable<User | null> {
    return this.afAuth.authState.pipe(take(1));
  }

  unsubscribeAuthState(): void {
    // Implement the logic for unsubscribing authState here
  }
  
}


/* src\app\components\services\brand\brand.service.spec.ts */

import { TestBed } from '@angular/core/testing';

import { BrandService } from './brand.service';

describe('BrandService', () => {
  let service: BrandService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(BrandService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});


/* src\app\components\services\brand\brand.service.ts */

import { Injectable } from '@angular/core';
import { map, Observable, from } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { Brand } from '../../../models/brand.model';
import {
  collection,
  CollectionReference,
  doc,
  DocumentData,
  getDoc,
  getDocs,
  getFirestore,
  query,
  QuerySnapshot,
  orderBy,
} from 'firebase/firestore';
import { environment } from 'src/environments/environment';
import { initializeApp } from 'firebase/app';

@Injectable({
  providedIn: 'root',
})
export class BrandService {
  private firestore: any;
  private collectionRef: CollectionReference<DocumentData>;

  constructor() {
    const app = initializeApp(environment.firebase);
    const firestore = getFirestore(app);
    this.collectionRef = collection(firestore, 'brands');
  }

  getBrands(): Observable<Brand[]> {
    const brandsQuery = query(this.collectionRef, orderBy('brand'));
    return from(getDocs(brandsQuery)).pipe(
      map((querySnapshot: QuerySnapshot<DocumentData>) =>
        querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() as Brand }))
      )
    );
  }

  getBrandById(id: string): Observable<Brand> {
    const brandDocRef = doc(this.collectionRef, id);
    return new Observable((observer) => {
      getDoc(brandDocRef)
        .then((brandDoc: DocumentData) => {
          if (brandDoc['exists']()) {
            const brand = brandDoc['data']() as Brand;
            brand.id = brandDoc['id'];
            observer.next(brand);
          } else {
            observer.error('Brand not found');
          }
        })
        .catch((error) => {
          observer.error(error);
        });
    });
  }
}


/* src\app\components\services\cart.service.spec.ts */

import { TestBed } from '@angular/core/testing';

import { CartService } from './cart.service';

describe('CartService', () => {
  let service: CartService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(CartService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});


/* src\app\components\services\cart.service.ts */

import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import { Product } from '../../models/product.model';

@Injectable({
  providedIn: 'root'
})
export class CartService {
  private products: Product[] = [];
  private cartItemCount: number = 0;

  getCartItemCount(): number {
    return this.cartItemCount;
  }

  addProduct(product: Product): void {
    this.products.push(product);
    this.cartItemCount++;
  }

  removeProduct(product: Product): void {
    const index = this.products.findIndex(p => p.id === product.id);
    if (index !== -1) {
      this.products.splice(index, 1);
      this.cartItemCount--;
    }
  }

  getProducts(): Product[] {
    return this.products;
  }

  clearCart(): void {
    this.products = [];
    this.cartItemCount = 0;
  }

  getTotal(): number {
    return this.products.reduce((acc, product) => acc + product.price, 0);
  }
}


/* src\app\components\services\firebase-test\firebase-test.component.html */

<p>firebase-test works!</p>


/* src\app\components\services\firebase-test\firebase-test.component.scss */



/* src\app\components\services\firebase-test\firebase-test.component.spec.ts */

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { FirebaseTestComponent } from './firebase-test.component';

describe('FirebaseTestComponent', () => {
  let component: FirebaseTestComponent;
  let fixture: ComponentFixture<FirebaseTestComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ FirebaseTestComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(FirebaseTestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* src\app\components\services\firebase-test\firebase-test.component.ts */

import { Component, OnInit } from '@angular/core';
import { AngularFirestore } from '@angular/fire/compat/firestore';

@Component({
  selector: 'app-firebase-test',
  templateUrl: './firebase-test.component.html',
  styleUrls: ['./firebase-test.component.scss']
})
export class FirebaseTestComponent implements OnInit {

  constructor(private firestore: AngularFirestore) { }

  ngOnInit(): void {
    // Verificar la conexión a Firebase
    console.log('Conectando a Firebase...');
    this.firestore.firestore.enableNetwork().then(() => {
      console.log('Conectado a Firebase!');
      // Leer datos de Firestore
      this.firestore.collection('products').get().subscribe((querySnapshot) => {
        querySnapshot.forEach((doc) => {
          console.log(doc.id, ' => ', doc.data());
        });
      });
    }).catch((error) => {
      console.log('Error de conexión:', error);
    });
  }
}


/* src\app\components\services\location.service.spec.ts */

import { TestBed } from '@angular/core/testing';

import { LocationService } from './location.service';

describe('LocationService', () => {
  let service: LocationService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(LocationService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});


/* src\app\components\services\location.service.ts */

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class LocationService {
  private apiUrl = 'https://www.datos.gov.co/resource/xdk5-pm3f.json';
  private departmentsSubject = new BehaviorSubject<string[]>([]);
  departments$ = this.departmentsSubject.asObservable();
  private citiesSubject = new BehaviorSubject<string[]>([]);
  cities$ = this.citiesSubject.asObservable();

  constructor(private http: HttpClient) {
    this.fetchDepartments();
  }

  private fetchDepartments(): void {
    this.http.get<any[]>(this.apiUrl).subscribe(
      (departments) => {
        // Remove duplicates by using a Set to store unique departments
        const uniqueDepartments = new Set(departments.map((department) => department.departamento));
        this.departmentsSubject.next([...uniqueDepartments]);
      },
      (error) => {
        console.error('Error fetching departments:', error);
      }
    );
  }

  getCitiesByDepartment(departmentId: string): Observable<any[]> {
    if (departmentId) {
      const params = { departamento: departmentId };
      return this.http.get<any[]>(this.apiUrl, { params }).pipe(
        map((cities) => {
          // Extract city names (municipios) and emit as an array of strings
          return cities.map((city) => city.municipio); // Modify "ciudad" to "municipio"
        })
      );
    } else {
      // If no department selected, emit an empty array of cities
      return this.citiesSubject.pipe(map(() => []));
    }
  }
}


/* src\app\components\services\payment\mercadopago.service.spec.ts */

import { TestBed } from '@angular/core/testing';

import { MercadopagoService } from './mercadopago.service';

describe('MercadopagoService', () => {
  let service: MercadopagoService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(MercadopagoService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});


/* src\app\components\services\payment\mercadopago.service.ts */

import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class MercadopagoService {

  constructor() { }
}


/* src\app\components\services\product\image-index.mixin.ts */

// image-index.mixin.ts

export interface ImageIndexMixin {
    currentImageIndex: number;
  }

/* src\app\components\services\product.service.spec.ts */

import { TestBed } from '@angular/core/testing';

import { ProductService } from './product.service';

describe('ProductService', () => {
  let service: ProductService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(ProductService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});


/* src\app\components\services\product.service.ts */

import { initializeApp } from 'firebase/app';
import { Injectable } from '@angular/core';
import { map, Observable, from } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { Product } from '../../models/product.model';
import {
  collection,
  CollectionReference,
  deleteDoc,
  doc,
  DocumentData,
  getDoc,
  getDocs,
  getFirestore,
  limit,
  orderBy,
  query,
  QuerySnapshot,
  setDoc,
  updateDoc,
  where,
} from 'firebase/firestore';
import { environment } from 'src/environments/environment';
import { CsvParserService } from '../../services/csv-parser.service';
import { CsvWriterService } from '../../services/csv-writer.service';
import { Subject } from 'rxjs';
import { Brand } from 'src/app/models/brand.model';

@Injectable({
  providedIn: 'root',
})
export class ProductService {
  getProduct(productId: any) {
    throw new Error('Method not implemented.');
  }
  private firestore: any;
  private collectionRef: CollectionReference<DocumentData>;
  private addToCartSubject: Subject<Product> = new Subject<Product>();
  addToCart$: Observable<Product> = this.addToCartSubject.asObservable();

  addProductToCart(product: Product) {
    this.addToCartSubject.next(product);
  }

  constructor(private csvParserService: CsvParserService) {
    const app = initializeApp(environment.firebase);
    const firestore = getFirestore(app);
    this.collectionRef = collection(firestore, 'productos');

    const file = new File([''], 'products.csv'); // Crear objeto File vacío con el nombre del archivo
    this.csvParserService.importProductsFromCSV(file);
  }

  getProducts(): Observable<Product[]> {
    const productsQuery = query(this.collectionRef, orderBy('name'));
    return from(getDocs(productsQuery)).pipe(
      map((querySnapshot: QuerySnapshot<DocumentData>) =>
        querySnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data() as Product,
        }))
      )
    );
  }

  getProductById(id: string): Observable<Product> {
    const productDocRef = doc(this.collectionRef, id);
    return new Observable((observer) => {
      getDoc(productDocRef)
        .then((productDoc: DocumentData) => {
          if (productDoc['exists']()) {
            const product = productDoc['data']() as Product;
            product.id = productDoc['id'];
            observer.next(product);
          } else {
            observer.error('Product not found');
          }
        })
        .catch((error) => {
          observer.error(error);
        });
    });
  }

  createProduct(product: Product): Observable<Product> {
    const id = this.firestore.createId();
    product.id = id;
    return new Observable((observer) => {
      setDoc(doc(this.collectionRef, product.id), product)
        .then(() => {
          const newProduct = { ...product };
          observer.next(newProduct);
        })
        .catch((error) => {
          observer.error(error);
        });
    });
  }

  updateProduct(product: Product): Observable<void> {
    const productDocRef = doc(this.collectionRef, product.id);
    return new Observable((observer) => {
      updateDoc(productDocRef, product as any)
        .then(() => {
          observer.next();
        })
        .catch((error) => {
          observer.error(error);
        });
    });
  }

  deleteProduct(id: string): Observable<void> {
    const productDocRef = doc(this.collectionRef, id);
    return new Observable((observer) => {
      deleteDoc(productDocRef)
        .then(() => {
          observer.next();
        })
        .catch((error) => {
          observer.error(error);
        });
    });
  }

  getBrands(): Observable<Brand[]> {
    const brandsQuery = query(collection(this.collectionRef.firestore, 'brands'), orderBy('name'));
    return from(getDocs(brandsQuery)).pipe(
      map((querySnapshot: QuerySnapshot<DocumentData>) =>
        querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() as Brand }))
      )
    );
  }
}


/* src\app\components\user-panel\user-auth.guard.spec.ts */

import { TestBed } from '@angular/core/testing';

import { UserAuthGuard } from './user-auth.guard';

describe('UserAuthGuard', () => {
  let guard: UserAuthGuard;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    guard = TestBed.inject(UserAuthGuard);
  });

  it('should be created', () => {
    expect(guard).toBeTruthy();
  });
});


/* src\app\components\user-panel\user-auth.guard.ts */

import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanActivate, CanActivateChild, RouterStateSnapshot, UrlTree } from '@angular/router';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class UserAuthGuard implements CanActivate, CanActivateChild {
  canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {
    return true;
  }
  canActivateChild(
    childRoute: ActivatedRouteSnapshot,
    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {
    return true;
  }
  
}


/* src\app\components\user-panel\user-panel.component.html */

<div class="container">
  <div class="menu">
    <ul class="menu-items">
      <li class="menu-item" (click)="selectModule('profile')">Profile</li>
      <li class="menu-item" (click)="selectModule('password')">Change Password</li>
      <li class="menu-item" (click)="selectModule('orders')">Pedidos</li>
      <li class="menu-item" (click)="selectModule('addresses')">Direcciones</li>
      <li class="menu-item" (click)="selectModule('account')">Detalles de la Cuenta</li>
      <li class="menu-item" (click)="selectModule('wishlist')">Lista de Deseos</li>
      <li class="menu-item" (click)="selectModule('logout')">Salir</li>
    </ul>
  </div>

  <div class="content">
    <h2 *ngIf="selectedModule === 'profile'">User Profile</h2>
    <form *ngIf="selectedModule === 'profile'" [formGroup]="profileForm">
      <div class="form-group">
        <label for="name">Name</label>
        <input type="text" formControlName="name" class="form-control" required>
      </div>
      <div class="form-group">
        <label for="email">Email</label>
        <input type="email" formControlName="email" class="form-control" required>
      </div>
      <!-- Add more profile fields as needed -->
      <button type="button" class="btn btn-primary" (click)="updateProfile()">Update Profile</button>
    </form>
    <div *ngIf="selectedModule === 'profile'">
      <h4>Name: {{ profileForm.get('name')?.value }}</h4>
      <h4>Email: {{ profileForm.get('email')?.value }}</h4>
    </div>

    <h2 *ngIf="selectedModule === 'password'">Change Password</h2>
    <form *ngIf="selectedModule === 'password'" [formGroup]="passwordForm">
      <div class="form-group">
        <label for="currentPassword">Current Password</label>
        <input type="password" formControlName="currentPassword" class="form-control" required>
      </div>
      <div class="form-group">
        <label for="newPassword">New Password</label>
        <input type="password" formControlName="newPassword" class="form-control" required>
      </div>
      <div class="form-group">
        <label for="confirmPassword">Confirm Password</label>
        <input type="password" formControlName="confirmPassword" class="form-control" required>
        <div *ngIf="passwordForm.hasError('passwordMismatch')" class="password-mismatch-error">
          Passwords do not match
        </div>
      </div>
      <button type="button" class="btn btn-primary" (click)="changePassword()">Change Password</button>
    </form>

    <h2 *ngIf="selectedModule === 'orders'">Pedidos</h2>
    <div *ngIf="selectedModule === 'orders'" class="module-content">
      <!-- Pedidos module content -->
    </div>

    <h2 *ngIf="selectedModule === 'addresses'">Direcciones</h2>
    <div *ngIf="selectedModule === 'addresses'" class="module-content">
      <!-- Direcciones module content -->
    </div>

    <h2 *ngIf="selectedModule === 'account'">Detalles de la Cuenta</h2>
    <div *ngIf="selectedModule === 'account'" class="module-content">
      <!-- Detalles de la Cuenta module content -->
    </div>

    <h2 *ngIf="selectedModule === 'wishlist'">Lista de Deseos</h2>
    <div *ngIf="selectedModule === 'wishlist'" class="module-content">
      <!-- Lista de Deseos module content -->
    </div>

    <div *ngIf="selectedModule === 'logout'" class="module-content">
      <button type="button" class="btn btn-primary" (click)="logout()">Logout</button>
    </div>
  </div>
</div>


/* src\app\components\user-panel\user-panel.component.scss */

@import '../../../../../../node_modules/bootstrap/scss/bootstrap.scss';
@import '~bootstrap/dist/css/bootstrap.min.css';

.container {
  display: flex;

  .menu {
    width: 200px;
    background-color: #f2f2f2;
    padding: 10px;
    border-right: 1px solid #ccc;

    .menu-items {
      list-style-type: none;
      padding: 0;
      margin: 0;

      .menu-item {
        cursor: pointer;
        padding: 5px;
        border-radius: 5px;
        margin-bottom: 5px;
        font-weight: bold;
        color: #000;
        background-color: #fff;
        transition: background-color 0.3s;

        &:hover {
          background-color: #e0e0e0;
        }
      }
    }
  }

  .content {
    flex: 1;
    padding: 10px;
  }
}

// Rest of the styles...


/* src\app\components\user-panel\user-panel.component.spec.ts */

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { UserPanelComponent } from './user-panel.component';

describe('UserPanelComponent', () => {
  let component: UserPanelComponent;
  let fixture: ComponentFixture<UserPanelComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ UserPanelComponent ]
    })
    .compileComponents();

    fixture = TestBed.createComponent(UserPanelComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


/* src\app\components\user-panel\user-panel.component.ts */

import { Component, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AuthService } from '../services/auth/auth.service';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Subscription } from 'rxjs';
import firebase from 'firebase/compat/app';
import { User } from '@firebase/auth-types';

@Component({
  selector: 'app-user-panel',
  templateUrl: './user-panel.component.html',
  styleUrls: ['./user-panel.component.scss']
})
export class UserPanelComponent implements OnInit, OnDestroy {
  profileForm: FormGroup;
  passwordForm: FormGroup;
  selectedModule: string;
  currentUser: User | null;
  currentUserSubscription: Subscription;

  constructor(
    private formBuilder: FormBuilder,
    private authService: AuthService,
    private snackBar: MatSnackBar
  ) {}

  ngOnDestroy(): void {
    if (this.currentUserSubscription) {
      this.currentUserSubscription.unsubscribe();
    }
  }

  ngOnInit(): void {
    this.selectedModule = 'profile';

    this.profileForm = this.formBuilder.group({
      name: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      // Add more profile fields as needed
    });

    this.passwordForm = this.formBuilder.group(
      {
        currentPassword: ['', Validators.required],
        newPassword: ['', [Validators.required, Validators.minLength(6)]],
        confirmPassword: ['', Validators.required]
      },
      { validator: this.passwordMatchValidator }
    );

    this.currentUserSubscription = this.authService.getCurrentUser().subscribe((value: User | null) => {
      if (value) {
        this.currentUser = value;
        this.profileForm.patchValue({
          name: value.displayName || '',
          email: value.email || ''
        });
      }
    });
  }

  passwordMatchValidator(formGroup: FormGroup): void {
    const newPassword = formGroup.get('newPassword')?.value;
    const confirmPassword = formGroup.get('confirmPassword')?.value;

    if (newPassword !== confirmPassword) {
      formGroup.get('confirmPassword')?.setErrors({ passwordMismatch: true });
    } else {
      formGroup.get('confirmPassword')?.setErrors(null);
    }
  }

  selectModule(module: string): void {
    this.selectedModule = module;
  }

  updateProfile(): void {
    if (this.profileForm.valid) {
      const { name, email } = this.profileForm.value;
      this.authService.updateUserProfile(name, email)
        .subscribe(
          () => {
            this.showSuccessMessage('Profile updated successfully');
          },
          (error: any) => {
            this.showErrorMessage('Failed to update profile');
            console.error(error);
          }
        );
    }
  }

  changePassword(): void {
    if (this.passwordForm.valid) {
      const { currentPassword, newPassword } = this.passwordForm.value;
      this.authService.changeUserPassword(currentPassword, newPassword)
        .subscribe(
          () => {
            this.showSuccessMessage('Password changed successfully');
          },
          (error: any) => {
            this.showErrorMessage('Failed to change password');
            console.error(error);
          }
        );
    }
  }

  logout(): void {
    this.authService.signOut()
      .then(() => {
        // Handle successful logout
      })
      .catch((error: any) => {
        console.error('Logout error:', error);
      });
  }

  showErrorMessage(message: string): void {
    this.snackBar.open(message, 'Close', { duration: 3000 });
  }

  showSuccessMessage(message: string): void {
    this.snackBar.open(message, 'Close', { duration: 3000 });
  }
}
